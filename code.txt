"""
    --- README ---
    I intend to write this code in multiple files but as the per the requested format of single file I will be adding
    separater to distinguish the files.

    Kindly consider this as both algorithm file and code file as I have wrote full fledge working code
"""


import datetime
import random
from math import radians, sin, cos, asin, sqrt


################################################### constant.py ###################################################

# Earth radius (in kilometers)
RADIUS_OF_EARTH = 6371

# Keeping time taken minute/km as 1
TIME_PER_KM = 1

# Used for calculation of buffer
BUFFER_CONSTANT = 0.33

# Used for data generation
MIN_LATITUDE = 40.877247
MAX_LATITUDE = 40.500806
MIN_LONGITUDE = -73.787542
MAX_LONGITUDE = -74.248090


START_TIME = datetime.datetime(year=2024, month=5, day=27, hour=8)
END_TIME = datetime.datetime(year=2024, month=5, day=27, hour=20)

MIN_DRIVER_PRICE = 7
MAX_DRIVER_PRICE = 15


################################################### utilities.py ###################################################

def haversine_distance(lon1, lat1, lon2, lat2):
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])

    d_lon = lon2 - lon1
    d_lat = lat2 - lat1
    a = sin(d_lat/2)**2 + cos(lat1) * cos(lat2) * sin(d_lon/2)**2
    c = 2 * asin(sqrt(a))

    return c * RADIUS_OF_EARTH


def generate_random_location():
    latitude = random.uniform(MIN_LATITUDE, MAX_LATITUDE)
    longitude = random.uniform(MIN_LONGITUDE, MAX_LONGITUDE)
    return latitude, longitude


def generate_random_timestamp():
    delta = END_TIME - START_TIME
    seconds = random.randint(0, int(delta.total_seconds()))
    return START_TIME + datetime.timedelta(seconds=seconds)


def generate_ride_data_point(ride_id):
    pickup_location = generate_random_location()
    pickup_time = generate_random_timestamp().timestamp()
    drop_off_location = generate_random_location()
    return {
        "ride_id": ride_id,
        "pickup_location": pickup_location,
        "pickup_time": pickup_time,
        "drop_off_location": drop_off_location
    }


def generate_driver_data_point(driver_id):
    current_location = generate_random_location()
    driver_price = random.randint(MIN_DRIVER_PRICE, MAX_DRIVER_PRICE)
    return {
        "driver_id": driver_id,
        "driver_price": driver_price,
        "current_location": current_location,
        "next_availability": START_TIME.timestamp()
    }


################################################### ride.py ###################################################

class Ride:
    def __init__(self, ride_id, pickup_location: tuple, pickup_time: float, drop_off_location: tuple,
                 pickup_address: str = "", drop_off_address: str = "", buffer: int = 15):
        self.ride_id = ride_id
        self.pickup_location = pickup_location  # Tuple of latitude/longitude
        self.pickup_time = pickup_time
        self.pickup_address = pickup_address
        self.drop_off_location = drop_off_location  # Tuple of latitude/longitude
        self.drop_off_address = drop_off_address
        self.buffer = buffer  # Buffer time for each ride in  minutes, default is 15 minutes
        # Taking displacement here rather than actual distance, in real world scenario direct map apis can be used to
        # get the same
        self.displacement = haversine_distance(self.pickup_location[0], self.pickup_location[1],
                                               self.drop_off_location[0], self.drop_off_location[1])
        self.estimated_duration = self._calculate_ride_eta()  # This duration will be travelling time + buffer time
        self.drop_off_time = self._get_drop_off_time()
        self.assigned_driver = None

    def assign_driver(self, driver):
        self.assigned_driver = driver

    def update_buffer(self, buffer):
        self.buffer = buffer

    def _calculate_ride_eta(self) -> float:
        only_ride_eta = int(self.displacement * TIME_PER_KM)
        ride_based_buffer = only_ride_eta * 0.33
        self.buffer = ride_based_buffer if ride_based_buffer > self.buffer else self.buffer

        return self.buffer + only_ride_eta

    def _get_drop_off_time(self) -> float:
        pickup_time_dt = datetime.datetime.fromtimestamp(self.pickup_time)
        drop_off_time_dt = pickup_time_dt + datetime.timedelta(minutes=self.estimated_duration)
        return drop_off_time_dt.timestamp()


################################################### driver.py ###################################################

class Driver:
    def __init__(self, driver_id, driver_price: int, current_location: tuple,
                 next_availability: float):
        self.driver_id = driver_id
        self.driver_price = driver_price
        self.expected_next_location = current_location
        self.expected_next_availability = next_availability
        self.assigned_rides = []

    def assign_ride(self, ride):
        self.assigned_rides.append(ride)

    def calculate_pickup_distance(self, pickup_location):
        displacement = haversine_distance(self.expected_next_location[0], self.expected_next_location[1],
                                          pickup_location[0], pickup_location[1])
        return displacement

    def calculate_pickup_cost(self, pickup_location):
        displacement = self.calculate_pickup_distance(pickup_location)
        pickup_cost = self.driver_price * displacement
        return pickup_cost

    def calculate_pickup_time(self, pickup_location) -> float:
        time_to_reach = int(self.calculate_pickup_distance(pickup_location) * TIME_PER_KM)
        pickup_time_dt = (datetime.datetime.fromtimestamp(self.expected_next_availability) +
                          datetime.timedelta(minutes=time_to_reach))
        return pickup_time_dt.timestamp()

    def driver_available(self, pickup_location, pickup_time):
        return self.calculate_pickup_time(pickup_location) <= pickup_time


################################################### ride_manager.py ###################################################

class RideManager:
    def __init__(self, date):
        self.date = date
        self.rides_driver_mapping = []

    @staticmethod
    def sort_rides(rides):
        rides.sort(key=lambda ride: ride.pickup_time)
        return rides

    def find_and_assign_driver(self, ride, driver_list):
        driver_pickup_cost = None
        ride_cost = None
        assigned_driver = None

        for driver in driver_list:
            if driver.driver_available(ride.pickup_location, ride.pickup_time):
                temp_driver_pickup_cost, temp_ride_cost = (int(driver.calculate_pickup_cost(ride.pickup_location)),
                                                           int(ride.displacement * driver.driver_price))
                if not assigned_driver:
                    driver_pickup_cost, ride_cost = temp_driver_pickup_cost, temp_ride_cost
                    assigned_driver = driver
                elif temp_driver_pickup_cost <= driver_pickup_cost and temp_ride_cost <= ride_cost:
                    driver_pickup_cost = temp_driver_pickup_cost
                    ride_cost = temp_ride_cost
                    assigned_driver = driver

        if assigned_driver:
            ride.assign_driver(assigned_driver)
            assigned_driver.assign_ride(ride)
            assigned_driver.expected_next_availability = ride.drop_off_time
            assigned_driver.expected_next_location = ride.drop_off_location
            self.rides_driver_mapping.append({
                "driver": assigned_driver,
                "ride": ride
            })

    def assign_rides_to_drivers(self, ride_list, driver_list):
        for ride in ride_list:
            self.find_and_assign_driver(ride, driver_list)


################################################### main.py ###################################################

rides = []
drivers = []

for i in range(100):
    rides.append(Ride(**generate_ride_data_point(i)))

for i in range(100):
    drivers.append(Driver(**generate_driver_data_point(i)))


ride_manager = RideManager(date="2024-05-26")
rides = ride_manager.sort_rides(rides)
ride_manager.assign_rides_to_drivers(rides, drivers)
print(f"{ride_manager.rides_driver_mapping = }")

for ride in ride_manager.rides_driver_mapping:
    print(f"Ride assigned to driver {ride['driver'].driver_id}. \nRide details are - \n"
          f"Distance -> {ride['ride'].displacement}\n"
          f"ETA - >{ride['ride'].estimated_duration}\n"
          f"Pickup time -> {ride['ride'].pickup_time}, Drop-off time -> {ride['ride'].drop_off_time}\n"
          f"Pickup location -> {ride['ride'].pickup_location}, Drop-off location -> {ride['ride'].drop_off_location}"
          f"\n----------------------------------------------------\n")
